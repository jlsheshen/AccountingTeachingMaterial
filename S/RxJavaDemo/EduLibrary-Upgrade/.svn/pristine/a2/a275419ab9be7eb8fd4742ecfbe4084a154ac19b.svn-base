package com.edu.library.upgrade;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.util.Log;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.edu.library.usercenter.UserCenterHelper;
import com.edu.library.usercenter.UserData;
import com.edu.library.util.NetworkUtil;
import com.lucher.net.req.RequestMethod;
import com.lucher.net.req.impl.JsonNetReqManager;
import com.lucher.net.req.impl.JsonReqEntity;

import cz.msebera.android.httpclient.Header;

/**
 * apk版本升级管理类，如果检测到新版本，弹出对话框，然后可进行下载操作,下载完毕后弹出安装确认界面,用于http类型
 * 
 * @author lucher
 * 
 */
public class ApkUpgradeManager2 {

	public static final String TAG = "ApkUpgradeManager2";

	private static ApkUpgradeManager2 mInstance;
	private Context mContext;

	ApkDownloadInfo upInfo = new ApkDownloadInfo();
	private ApkDownloadDialog dialog;

	private ApkUpgradeManager2(Context context, String apkPath, int iconResId) {
		mContext = context;
		UpgradeUtil.APK_PATH = apkPath;
		UpgradeUtil.ICON_RES_ID = iconResId;
	}

	/**
	 * 单例模式获取唯一实例
	 * 
	 * @param context
	 * @param apkPath
	 *            apk缓存文件存放路径
	 * @param iconResId
	 *            通知栏图标icon的资源id
	 * @return
	 */
	public static ApkUpgradeManager2 getSingleton(Context context, String apkPath, int iconResId) {
		if (mInstance == null) {
			mInstance = new ApkUpgradeManager2(context, apkPath, iconResId);
		}
		return mInstance;
	}

	/**
	 * 检测是否有新版本，若有弹出提示框
	 * 
	 * @param defualtUserId
	 *            默认用户id，用于未注册或没有安装用户中心情况
	 * @param url
	 *            服务器提供的版本检测接口url
	 */
	public void checkNewVersion(int defualtUserId, String url) {
		if (NetworkUtil.isNetworkAvailable(mContext)) {
			ApkVerisonInfo info = getApkInfo(defualtUserId);
			JsonReqEntity reqEntity = new JsonReqEntity(mContext, RequestMethod.POST, url, JSON.toJSONString(info));
			new JsonNetReqManager() {
				@Override
				public void onConnectionFailure(String arg0, Header[] arg1) {
					Log.d(TAG, "onConnectionFailure..." + arg0);
				}

				@Override
				public void onConnectionError(String arg0) {
					Log.d(TAG, "onConnectionError..." + arg0);
				}

				@Override
				public void onConnectionSuccess(JSONObject arg0, Header[] arg1) {
					upInfo = JSONObject.parseObject(arg0.toJSONString(), ApkDownloadInfo.class);
					if (upInfo != null && "Success".equals(upInfo.getState())) {
						Log.d(TAG, "new version found...");
						dialog = new ApkDownloadDialog(mContext, upInfo);
						dialog.show();
					} else {
						Log.d(TAG, "no new version...");
					}
				}
			}.sendRequest(reqEntity);
		}
	}

	/**
	 * 获取apk相关信息
	 * 
	 * @param defaultUserId
	 *            默认一键注册id号
	 * @return
	 */
	private ApkVerisonInfo getApkInfo(int defaultUserId) {
		PackageManager pkgManager = mContext.getPackageManager();
		// 从数据库获取用户注册信息
		ApkVerisonInfo apkInfo = new ApkVerisonInfo();
		// 用来存储获取的应用信息数据
		PackageInfo packageInfo;
		try {
			packageInfo = pkgManager.getPackageInfo(mContext.getPackageName(), 0);
			apkInfo.setApkName(packageInfo.applicationInfo.loadLabel(pkgManager).toString());
			apkInfo.setPackageName(packageInfo.packageName);
			apkInfo.setApkVersionCode(packageInfo.versionCode);

			UserData userData = UserCenterHelper.getUserInfo(mContext);
			if (userData == null) {// 没有用户中心或未注册
				apkInfo.setUserId(defaultUserId);
			} else {
				apkInfo.setUserId(userData.getUserId());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Log.i(TAG, "getApkInfo:" + apkInfo);
		return apkInfo;
	}
}
